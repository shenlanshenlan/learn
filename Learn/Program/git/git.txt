      常用命令
git push origin 本地                     ：创建远程分支 <br>
git checkout -b 本地 origin/远程         : 从远程下载一个本地没有的分支 <br>
git fetch origin 远程                    ：本地<br>
git push origin :远程                    ：删除远程分支<br>
git push origin  --delete 远程           ：删除远程分支<br>

git reset  --hard 3h3ew3       回滚

windows git 配置环境变量
set node(环境变量名) c:\node.exe(路径)    --仅用户有效


标签 （对应每次提交）
git tag -a v1.4 -m 'my version 1.4' 创建标签（带说明）
git tag  显示标签所有标签
git show  <名称> 显示 该标签信息（提交编号，日期）
git tag -a <tagname> -m "runoob.com标签"  指定标签信息
git push origin --tags       推送远程
git tag -d <tagname>  删除
git push origin :refs/tags/标签名    删除远程标签

情景:两个分支合并到主分支情况改动文件
	主分支切出2个分支
	编写分支1,编写分支2(同一个文件）
	完成以后 
	1从主分支合并分支1（正常）(此时主分支被修改）
	2合并分支2（提示冲突）

	主分支切出2个分支
	编写分支1,编写分支2(不同文件）
	完成以后 
	1从主分支合并分支1（正常）(此时主分支被修改）
	2合并分支2（提示合并，注意此时合并会产生新的log）

情景：关于文件的冲突(git 会自动检测对文件的改动）(创建文件)
      现象：
        主分支创建文件a 
        分支1重命名文件a为as
        (此时等同于在文件夹中删除了a并创建新文件as(未被追踪）
        注意# 这个操作和分支和git都有关系,等于在目录中直接操作
        所以分支master 和 分支1 中都有了这个操作记录 验证）
         
        分支1：
           使用 git add -A  commit
                这种情况下 分支1(追踪)了新文件 则该文件属于分支1
                且master分支只有原文件a 的删除记录,没有新文件
                也就是说此时master分支中没有文件
           使用 git commit -am"k"
                这种情况下 分支1(没有追踪)新文件 则该文件属于(未追踪文件）
                而(未追踪的文件，在任何分支下都可见）
          注意：如果分支1只追踪了删除的文件则新文件未被追踪，master分支中有原文件和新文件
                如果分支1只追踪了新文件，则删除操作没有被追踪则master分支中没有文件
                如果分支1追踪了所有操作，则文件操作属于分支1,master分支不改变         
                       
       总结：重点1：对于新文件需要使用add 添加追踪（删除也是）
             重点2：对于未追踪的文件对于任何分支都可见,在哪个分支追踪则属于哪个分支
             重点3：事实上无论在哪个分支对文件的操作 总是对所有的分支都有效
                    都会产生相应的文件记录 直到某个分支把它放入到缓存区
             
情景：合并分支   是冲突 还是更新 (修改相同文件) --仅猜测
      现象：从dev 创建分支a 并修改文件
         出现冲突： 以v版本处开始    如果分支a修改了文件处c ,dev的后续分支也修改了文件处c
                          则出现合并冲突
         出现正常合并：以v版本处开始 如果分支a修改了文件处c,而dev没有修改
                      或者以v版本处开始，如果分支a没有修改c，而dev修改了c
                      则会正常合并，不提示冲突



  
  
        

