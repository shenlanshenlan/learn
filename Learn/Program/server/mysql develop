服务器构架
https://juejin.im/entry/5794bf9e5bbb500063da1dbe


scale-up
纵向扩展   （通过替换更好的机器和资源来实现伸缩，提升服务能力）
scale-out
横向扩展哪  (通过加节点来实现伸缩提升服务能力)
对于互联网的高并发应用来说 无疑 scaleout 才是出路

v1 简单网站架构 
数据存储只需要一个 mysql instance 
 
V2.0 垂直拆分
将用户信息数据，和业务数据拆分到不同的三个实例上。

一般当V1.0 遇到瓶颈时，首先最简便的拆分方法就是垂直拆分，何谓垂直？
就是从业务角度来看，将关联性不强的数据拆分到不同的instance上，从而达到消除瓶颈的目标。
以图中的为例，将用户信息数据，和业务数据拆分到不同的三个实例上。对于重复读类型比较多的场景，
我们还可以加一层cache，来减少对DB的压力。

V3.0  主从架构 (读写)   ##数据一致性
在Mysql的场景下就是通过主从结构，主库抗写压力，通过从库来分担读压力，对于写少读多的应用

V4.0  水平拆分   
对于V2.0 V3.0方案遇到瓶颈时，都可以通过水平拆分来解决
，水平拆分和垂直拆分有较大区别，垂直拆分拆完的结果，在一个实例上是拥有全量数据的，
而水平拆分之后，任何实例都只有全量的1/n的数据，
以下图Userinfo的拆分为例，将userinfo拆分为3个cluster，每个cluster持有总量的1/3数据，
3个cluster数据的总和等于一份完整数据
（注：这里不再叫单个实例 而是叫一个cluster 代表包含主从的一个小mysql集群）

数据如何路由？